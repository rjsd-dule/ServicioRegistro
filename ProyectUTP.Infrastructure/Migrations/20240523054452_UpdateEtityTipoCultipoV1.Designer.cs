// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProyectUTP.Infrastructure;

#nullable disable

namespace ProyectUTP.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240523054452_UpdateEtityTipoCultipoV1")]
    partial class UpdateEtityTipoCultipoV1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Soil")
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProyectUTP.Domain.Identity.Entities.TipoCultivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CicloDeCultivo")
                        .HasColumnType("integer");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("text");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaCosecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaSiembra")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaUltimaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("text");

                    b.Property<string>("NombreCultivo")
                        .HasColumnType("text");

                    b.Property<string>("PHRecomendado")
                        .HasColumnType("text");

                    b.Property<string>("RequerimientosClimaticos")
                        .HasColumnType("text");

                    b.Property<string>("Temporada")
                        .HasColumnType("text");

                    b.Property<string>("TipoDeSuelo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TipoCultivo", "Soil");
                });

            modelBuilder.Entity("ProyectUTP.Domain.Identity.Entities.Ubicacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreadoPor")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaUltimaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Latitud")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<decimal?>("Longitud")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ubicacion", "Soil");
                });
#pragma warning restore 612, 618
        }
    }
}
